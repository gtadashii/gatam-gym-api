service: gatam-gym-api
frameworkVersion: "3"

custom:
  workoutsTable: workoutsTable
  usersTable: gatam-usersTable

provider:
  name: aws
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["workoutsTable", "Arn"] }
        - { "Fn::GetAtt": ["usersTable", "Arn"] }
  environment:
    AWS_DEPLOY_REGION: "us-east-1"
    WORKOUT_TABLE: ${self:custom.workoutsTable}
    USERS_TABLE: ${self:custom.usersTable}
    JWT_SECRET: asldfhasodifjapsojf
  versionFunctions: false

functions:
  createWorkout:
    handler: src/handlers/workouts.createWorkout
    events:
      - httpApi:
          method: POST
          path: /workouts
  listWorkouts:
    handler: src/handlers/workouts.listWorkouts
    events:
      - httpApi:
          method: GET
          path: /workouts
  getWorkout:
    handler: src/handlers/workouts.getWorkout
    events:
      - httpApi:
          method: GET
          path: /workouts/{id}
  updateWorkout:
    handler: src/handlers/workouts.updateWorkout
    events:
      - httpApi:
          method: PUT
          path: /workouts/{id}
  deleteWorkout:
    handler: src/handlers/workouts.deleteWorkout
    events:
      - httpApi:
          method: DELETE
          path: /workouts/{id}
  authRegister:
    handler: src/handlers/authentication.register
    events:
      - httpApi:
          method: POST
          path: /auth/register
  authVerify:
    handler: src/handlers/authentication.verify
    events:
      - httpApi:
          method: POST
          path: /auth/verify
  authLogin:
    handler: src/handlers/authentication.login
    events:
      - httpApi:
          method: POST
          path: /auth/login
  listUsers:
    handler: src/handlers/user.listUsers
    events:
      - httpApi:
          method: GET
          path: /users
  getUser:
    handler: src/handlers/user.getUser
    events:
      - httpApi:
          method: GET
          path: /users/{id}
  updateUser:
    handler: src/handlers/user.updateUser
    events:
      - httpApi:
          method: PUT
          path: /users/{id}
  deleteUser:
    handler: src/handlers/user.deleteUser
    events:
      - httpApi:
          method: DELETE
          path: /users/{id}

resources:
  Resources:
    workoutsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.workoutsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: user-email
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
